@using BlogBlazorUI.Pages.Client;
@using BlogBlazorUI.Utils;
@layout AdminLayout
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager;
@inject ILocalStorageService LocalStorage;

<MudAppBar Bottom="true" Fixed="false" Color="MudBlazor.Color.Primary" Elevation="1">
    <ClientItem />
    <MudButton Href="dashboard/articles" Variant="MudBlazor.Variant.Text" Color="MudBlazor.Color.Inherit">Articles</MudButton>
    <MudSpacer />
    <MudBadge Origin="Origin.BottomCenter" Overlap="true" Elevation="4" Icon="@Icons.Material.Filled.MoreVert" Color="MudBlazor.Color.Primary">
        <MudMenu Label="@(user != null ? @user.Claims.Where(x => x.Type == "Name").Select(x => x.Value).FirstOrDefault() : "")" Variant="MudBlazor.Variant.Filled" TransformOrigin="Origin.TopCenter" AnchorOrigin="Origin.CenterCenter" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Large">
            <MudMenuItem>Profile</MudMenuItem>
            <MudMenuItem>Settings</MudMenuItem>
            <MudMenuItem OnClick="@Logout">Logout</MudMenuItem>
        </MudMenu>
    </MudBadge>

</MudAppBar>


@code{
    private AuthenticationState authState { get; set; }
    private ClaimsPrincipal user { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        authState = await customAuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");

        CustomAuthenticationStateProvider customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/login");

    }

}