@page "/articles/{categoryId:int}"
@page "/articles/{categoryId:int}/page/{index:int}"
@using BlogBlazorUI.Dtos;
@using BlogBlazorUI.Models;
@using BlogBlazorUI.Results;
@using BlogBlazorUI.Service;
@using BlogBlazorUI.Utils;

@if (ArticlesAsCategory == null)
{

    <div class="col-md-8 d-flex justify-content-center">
        <BSSpinner></BSSpinner>
    </div>


}
@if(ArticlesAsCategory != null && ArticlesAsCategory.Count == 0)
{
    <div class="col-md-8 d-flex justify-content-center">
        <h3>Articles as Category is empty!</h3>
    </div>
}
@if (ArticlesAsCategory?.Count > 0)
{
    <div class="col-md-8">
        @foreach (var aac in ArticlesAsCategory)
        {
            <!--Articles section starts here-->
            <Article ArticleVM="@aac" />
            <!--Articles section ends here-->

          
        }
        <div class="row mt-2">
            <Pagination PageCount="@paginationCount"
                        PageIndex="@pageIndex"
                        OnPageLinkClick="@OnPageLinkClick"
                        NextEllipsisPageIcon="fas fa-ellipsis-h"
                        PrevEllipsisPageIcon="fas fa-ellipsis-h"
                        MaxPageLinkCount="10"
                        NextPageIcon="fas fa-sharp fa-solid fa-arrow-right"
                        PrevPageIcon="fas fa-sharp fa-solid fa-arrow-left">
            </Pagination>
        </div>
      </div>
}


@code {
    [Parameter]
    public int categoryId { get; set; }
    [Parameter]
    public int index { get; set; }
    [Inject]
    public HttpClient HttpClient { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public string CategoryName { get; set; }

    public int paginationCount { get; set; } 

    public int pageCount { get; set; } = 5;

    public int pageIndex { get; set; } = 1;

    public int TotalCount { get; set; }

    public string ErrorMessage { get; set; }

    public List<ArticleVM> ArticlesAsCategory { get; set; }

    protected async Task OnPageLinkClick(int pageIndex)
    {
        this.pageIndex = pageIndex;
        //this.index = pageIndex;
        System.Console.WriteLine($"PageIndex: {pageIndex}");
        NavigationManager.NavigateTo($"/articles/{this.categoryId}/page/{pageIndex}");
    }

    protected async Task getArticlesAsPaginately(int pageIndex)
    {

        if (!await ArticleService.GetArticlesAsCategory(new ApiHelper(), $"Articles/ArticlesAsCategory/{categoryId}/{pageIndex}/{pageCount}"))
        {
            System.Console.WriteLine("articles by categories error");
        }
            ArticlesAsCategory = ArticleService.ArticlesAsCategoryResponse.Data.Articles;
            TotalCount = ArticleService.ArticlesAsCategoryResponse.Data.TotalCount;
            CategoryName = ArticlesAsCategory.Select(x => x.Category.Name).FirstOrDefault();

        paginationCount = Decimal.ToInt32(Math.Floor(Convert.ToDecimal(TotalCount / pageCount)));
        if (TotalCount % pageCount != 0)
        {
            this.paginationCount += 1;
        }
   
        StateHasChanged();

    }

    //protected override async Task OnInitializedAsync()
    //{
    //    System.Console.WriteLine("OnInitializedAsync çalıştı...");
    //    await getArticlesAsPaginately(this.pageIndex);
    //}

    protected override async Task OnParametersSetAsync()
    {
        this.ArticlesAsCategory = null;
        System.Console.WriteLine("Parametre değişti...");
        if (this.index == 0)
        {
            this.pageIndex = 1;

        }
        await getArticlesAsPaginately(this.pageIndex);
      
    }

}
